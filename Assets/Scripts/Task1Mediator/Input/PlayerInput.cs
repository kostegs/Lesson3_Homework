//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Task1Mediator/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""8844ea0c-b395-4960-aeb3-7f762d87ecef"",
            ""actions"": [
                {
                    ""name"": ""IncreaseHP"",
                    ""type"": ""Button"",
                    ""id"": ""51f172a0-d490-43bd-b022-c017d70e544a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecreaseHP"",
                    ""type"": ""Button"",
                    ""id"": ""9f2afc33-64c2-41ba-90d9-8dccaf4f19d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5c448bce-b2e8-4a2c-b56c-340a478d34d1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseHP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42a86335-35e8-422a-b924-e437d08f7e3d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreaseHP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LevelControls"",
            ""id"": ""41a667d9-7ec8-4459-8b3c-925f6a501a7c"",
            ""actions"": [
                {
                    ""name"": ""IncreaseLevel"",
                    ""type"": ""Button"",
                    ""id"": ""f5b7db36-d2ff-4755-9c01-8ca248ee8aa2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecreaseLevel"",
                    ""type"": ""Button"",
                    ""id"": ""3ddcd51a-18be-4694-8bd2-7048c201c5c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26f1faab-38fc-4d79-8090-4b27ba25c77b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncreaseLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef5f10c3-7fe5-48a4-81ff-ebf5c80ea770"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecreaseLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_IncreaseHP = m_PlayerControls.FindAction("IncreaseHP", throwIfNotFound: true);
        m_PlayerControls_DecreaseHP = m_PlayerControls.FindAction("DecreaseHP", throwIfNotFound: true);
        // LevelControls
        m_LevelControls = asset.FindActionMap("LevelControls", throwIfNotFound: true);
        m_LevelControls_IncreaseLevel = m_LevelControls.FindAction("IncreaseLevel", throwIfNotFound: true);
        m_LevelControls_DecreaseLevel = m_LevelControls.FindAction("DecreaseLevel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private List<IPlayerControlsActions> m_PlayerControlsActionsCallbackInterfaces = new List<IPlayerControlsActions>();
    private readonly InputAction m_PlayerControls_IncreaseHP;
    private readonly InputAction m_PlayerControls_DecreaseHP;
    public struct PlayerControlsActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @IncreaseHP => m_Wrapper.m_PlayerControls_IncreaseHP;
        public InputAction @DecreaseHP => m_Wrapper.m_PlayerControls_DecreaseHP;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Add(instance);
            @IncreaseHP.started += instance.OnIncreaseHP;
            @IncreaseHP.performed += instance.OnIncreaseHP;
            @IncreaseHP.canceled += instance.OnIncreaseHP;
            @DecreaseHP.started += instance.OnDecreaseHP;
            @DecreaseHP.performed += instance.OnDecreaseHP;
            @DecreaseHP.canceled += instance.OnDecreaseHP;
        }

        private void UnregisterCallbacks(IPlayerControlsActions instance)
        {
            @IncreaseHP.started -= instance.OnIncreaseHP;
            @IncreaseHP.performed -= instance.OnIncreaseHP;
            @IncreaseHP.canceled -= instance.OnIncreaseHP;
            @DecreaseHP.started -= instance.OnDecreaseHP;
            @DecreaseHP.performed -= instance.OnDecreaseHP;
            @DecreaseHP.canceled -= instance.OnDecreaseHP;
        }

        public void RemoveCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);

    // LevelControls
    private readonly InputActionMap m_LevelControls;
    private List<ILevelControlsActions> m_LevelControlsActionsCallbackInterfaces = new List<ILevelControlsActions>();
    private readonly InputAction m_LevelControls_IncreaseLevel;
    private readonly InputAction m_LevelControls_DecreaseLevel;
    public struct LevelControlsActions
    {
        private @PlayerInput m_Wrapper;
        public LevelControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @IncreaseLevel => m_Wrapper.m_LevelControls_IncreaseLevel;
        public InputAction @DecreaseLevel => m_Wrapper.m_LevelControls_DecreaseLevel;
        public InputActionMap Get() { return m_Wrapper.m_LevelControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelControlsActions set) { return set.Get(); }
        public void AddCallbacks(ILevelControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelControlsActionsCallbackInterfaces.Add(instance);
            @IncreaseLevel.started += instance.OnIncreaseLevel;
            @IncreaseLevel.performed += instance.OnIncreaseLevel;
            @IncreaseLevel.canceled += instance.OnIncreaseLevel;
            @DecreaseLevel.started += instance.OnDecreaseLevel;
            @DecreaseLevel.performed += instance.OnDecreaseLevel;
            @DecreaseLevel.canceled += instance.OnDecreaseLevel;
        }

        private void UnregisterCallbacks(ILevelControlsActions instance)
        {
            @IncreaseLevel.started -= instance.OnIncreaseLevel;
            @IncreaseLevel.performed -= instance.OnIncreaseLevel;
            @IncreaseLevel.canceled -= instance.OnIncreaseLevel;
            @DecreaseLevel.started -= instance.OnDecreaseLevel;
            @DecreaseLevel.performed -= instance.OnDecreaseLevel;
            @DecreaseLevel.canceled -= instance.OnDecreaseLevel;
        }

        public void RemoveCallbacks(ILevelControlsActions instance)
        {
            if (m_Wrapper.m_LevelControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelControlsActions @LevelControls => new LevelControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnIncreaseHP(InputAction.CallbackContext context);
        void OnDecreaseHP(InputAction.CallbackContext context);
    }
    public interface ILevelControlsActions
    {
        void OnIncreaseLevel(InputAction.CallbackContext context);
        void OnDecreaseLevel(InputAction.CallbackContext context);
    }
}
